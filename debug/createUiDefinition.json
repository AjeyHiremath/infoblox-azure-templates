{
	"handler": "Microsoft.Compute.MultiVm",
	"version": "0.0.1-preview",
	"parameters": {
		"basics": [
		{
			"name": "vmName",
			"type": "Microsoft.Common.TextBox",
			"label": "NIOS VM name",
			"toolTip": "The name of the new NIOS vm.",
			"constraints": {
				"required": true,
				"regex": "^[a-z][a-z0-9]{3,24}$",
        		"validationMessage": "NIOS Vm name must be between 3 and 24 characters long, must start from lowercase letter and can contain only numbers and lowercase letters."
    		}
	    },
		{
			"name": "passwordSection",
			"type": "Microsoft.Common.Section",
		 	"label": "Password for admin user",
		 	"elements": [
			{
				"name": "SSHCredntials",
				"type": "Microsoft.Compute.CredentialsCombo",
				"label": {
					"password": "admin password",
					"confirmPassword": "Confirm admin password"
				},
				"toolTip": {
					"password": "password for the admin user",
					"confirmPassword": "password for the admin user"
				},
				"constraints": {
					"required": true
				},
				"options": {
					"hideConfirmation": false
				},
				"osPlatform": "Windows",
				"visible": true
			}
		  ],
		  "visible": true
		}],
		"steps": [{
			"name": "vmSettings",
			"label": "VM Settings",
			"bladeTitle": "NIOS VM settings",
			"subLabel": {
				"preValidation": "Configure VM Settings",
				"postValidation": "Done"
			},
			"elements": [
				{
					"name": "niosModel",
					"type": "Microsoft.Common.DropDown",
					"label": "NIOS model",
					"defaultValue": "TE-1420 debug model (Standard DS2)",
					"toolTip": "",
					"constraints": {
						"allowedValues": [
							{
								"label": "TE-V1420 debug model (Standard DS2)",
								"value": "vnios-te-1420-test"
							},
							{
								"label": "TE-V820 (Standard DS2)",
								"value": "te-820"
							},
							{
								"label": "TE-V1420 (Standard DS3)",
								"value": "te-1420"
							},
							{
								"label": "TE-V2220 (Standard DS3)",
								"value": "te-2220"
							},
							{
								"label": "CP-V800 (Standard DS2)",
								"value": "cp-v800"
							},
							{
								"label": "CP-V1400 (Standard DS3)",
								"value": "cp-v1400"
							},
							{
								"label": "CP-V2200 (Standard DS3)",
								"value": "cp-v2200"
							}
						]
					},
					"visible": true
				},
				{
					"name": "storageAccount",
					"type": "Microsoft.Storage.StorageAccountSelector",
					"label": "Storage account",
					"toolTip": "Storage account for the NIOS disk, must be a premium type",
					"defaultValue": {
						"type": "Premium_LRS"
					},
					"constraints": {
						"allowedTypes": ["Premium_LRS"]
					},
					"options": {
						"hideExisting": false
					},
					"visible": true
				},
				{
					"name": "storageAccountForLogs",
					"type": "Microsoft.Storage.StorageAccountSelector",
					"label": "Storage account for BootDiagnostics.",
					"toolTip": "Storage account for the Boot Disgnostic file, must be a non premium type",
					"defaultValue": {
						"type": "Standard_LRS"
					},
					"constraints": {
						"allowedTypes": ["Standard_LRS"]
					},
					"options": {
						"hideExisting": false
					},
					"visible": true
				},
				{
					"name": "niosNetwork",
					"type": "Microsoft.Network.VirtualNetworkCombo",
					"label": {
						"virtualNetwork": "Virtual network",
						"subnets": "Subnets"
					},
					"toolTip": {
						"virtualNetwork": "",
						"subnets": ""
					},
					"constraints": {
						"minAddressPrefixSize": "/28"
					},
					"options": {
						"hideExisting": false
					},
					"subnets": {
						"subnetLan1": {
							"label": "Subnet for LAN1 port",
							"constraints": {
								"minAddressPrefixSize": "/30",
								"minAddressCount": 1
							}
						},
						"subnetMgmt": {
							"label": "Subnet for MGMT port",
							"constraints": {
								"minAddressPrefixSize": "/30",
								"minAddressCount": 1
							}
						}
					},
					"visible": true
				},
				{
					"name": "dnsAndPublicIP",
					"type": "Microsoft.Network.PublicIpAddressCombo",
					"label": {
						"publicIpAddress": "Public IP address",
						"domainNameLabel": "Public DNS name"
					},
					"toolTip": {
						"publicIpAddress": "",
						"domainNameLabel": ""
					},
					"defaultValue": {
						"publicIpAddressName": ""
					},
					"constraints": {
						"required": {
							"domainNameLabel": true
						}
					},
					"options": {
						"hideNone": false,
						"hideDomainNameLabel": false,
						"hideExisting": false
					},
					"visible": true
				},
				{
					"name": "availabilitySection",
					"type": "Microsoft.Common.Section",
				 	"label": "Avaliability set",
				 	"elements": [
						{
							"name": "avaliabilityNoneNewOrExisting",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Avaliability Set",
							"defaultValue": "None",
							"toolTip": "Select New or Existing avaliability set if you want VM to be part of it. Don't forget to fill correctly Avaliability set name if you select New or Existing here.",
							"constraints": {
								"allowedValues": [
									{
										"label": "None",
										"value": "none"
									},
									{
										"label": "New",
										"value": "new"
									},
									{
										"label": "Existing",
										"value": "existing"
									}
								]
							},
							"visible": true
						},
						{
							"name": "avaliabilitySetName",
							"type": "Microsoft.Common.TextBox",
							"label": "Avaliability set name",
							"toolTip": "If avaliability set is New, enter it's name, which must not . If you select existing, name should point on existing available Avaliability Set.",
							"constraints": {
								"required": false
							},
							"visible": true
						}
				  ],
				  "visible": true
				}

			]
		}],
		"outputs": {
			"vmName": "[basics('vmName')]",
			"niosModel": "[steps('vmSettings').niosModel]",

			"adminPassword": "[basics('passwordSection').SSHCredntials.password]",
			"sshPublicKey": "[basics('passwordSection').SSHCredntials.sshPublicKey]",
			"authenticationType": "[basics('passwordSection').SSHCredntials.authenticationType]",

			"virtualNetworkName": "[steps('vmSettings').niosNetwork.name]",
			"virtualNetworkExistingRGName": "[steps('vmSettings').niosNetwork.resourceGroup]",
			"virtualNetworkAddressPrefix": "[steps('vmSettings').niosNetwork.addressPrefix]",
			"vnetNewOrExisting": "[steps('vmSettings').niosNetwork.newOrExisting]",

			"Subnet1Prefix": "[steps('vmSettings').niosNetwork.subnets.subnetLan1.addressPrefix]",
			"Subnet1Name": "[steps('vmSettings').niosNetwork.subnets.subnetLan1.name]",
			"subnet1StartAddress": "[steps('vmSettings').niosNetwork.subnets.subnetLan1.startAddress]",

			"Subnet2Prefix": "[steps('vmSettings').niosNetwork.subnets.subnetMgmt.addressPrefix]",
			"Subnet2Name": "[steps('vmSettings').niosNetwork.subnets.subnetMgmt.name]",
			"subnet2StartAddress": "[steps('vmSettings').niosNetwork.subnets.subnetMgmt.startAddress]",
			
			"newStorageAccountName": "[steps('vmSettings').storageAccount.name]",
			"storageAccountType": "[steps('vmSettings').storageAccount.type]",
			"storageAccountNewOrExisting": "[steps('vmSettings').storageAccount.newOrExisting]",
			"storageAccountExistingRG": "[steps('vmSettings').storageAccount.resourceGroup]",

			"newStorageAccountForLogsName": "[steps('vmSettings').storageAccountForLogs.name]",
			"storageAccountForLogsType": "[steps('vmSettings').storageAccountForLogs.type]",
			"storageAccountForLogsNewOrExisting": "[steps('vmSettings').storageAccountForLogs.newOrExisting]",
			"storageAccountForLogsExistingRG": "[steps('vmSettings').storageAccountForLogs.resourceGroup]",

			"publicIPAddressName": "[steps('vmSettings').dnsAndPublicIP.name]",
			"publicIPDnsName": "[steps('vmSettings').dnsAndPublicIP.domainNameLabel]",
			"publicIPNewOrExistingOrNone": "[steps('vmSettings').dnsAndPublicIP.newOrExistingOrNone]",
			"publicIPExistingRGName": "[steps('vmSettings').dnsAndPublicIP.resourceGroup]"
		}
	}
}